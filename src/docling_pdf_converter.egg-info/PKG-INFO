Metadata-Version: 2.1
Name: docling-pdf-converter
Version: 1.0.0
Summary: PDF to Markdown converter using Docling with cross-compilation capabilities
Author-email: Your Name <your.email@example.com>
License: MIT License
        
        Copyright (c) 2024 Eirini
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/yourusername/docling-pdf-converter
Project-URL: Documentation, https://github.com/yourusername/docling-pdf-converter#readme
Project-URL: Repository, https://github.com/yourusername/docling-pdf-converter.git
Project-URL: Issues, https://github.com/yourusername/docling-pdf-converter/issues
Project-URL: Changelog, https://github.com/yourusername/docling-pdf-converter/blob/main/CHANGELOG.md
Keywords: pdf,markdown,converter,docling,cross-compilation
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Desktop Environment
Classifier: Intended Audience :: End Users/Desktop
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Office/Business
Classifier: Topic :: Text Processing :: Markup :: Markdown
Classifier: Typing :: Typed
Requires-Python: >=3.12
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: docling
Requires-Dist: typing-extensions>=4.9.0
Provides-Extra: dev
Requires-Dist: pytest>=8.3.3; extra == "dev"
Requires-Dist: pytest-cov>=6.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.24.0; extra == "dev"
Requires-Dist: pytest-timeout>=2.3.1; extra == "dev"
Requires-Dist: ruff>=0.7.2; extra == "dev"
Requires-Dist: mypy>=1.13.0; extra == "dev"
Requires-Dist: pyinstaller>=6.11.0; extra == "dev"
Requires-Dist: bandit>=1.7.10; extra == "dev"
Requires-Dist: safety; extra == "dev"
Requires-Dist: ipython; extra == "dev"

# Docling PDF to Markdown Converter

[![Code Quality](https://github.com/yourusername/docling-pdf-converter/workflows/Code%20Quality/badge.svg)](https://github.com/yourusername/docling-pdf-converter/actions)
[![Tests](https://github.com/yourusername/docling-pdf-converter/workflows/Tests/badge.svg)](https://github.com/yourusername/docling-pdf-converter/actions)
[![PyInstaller Build and Release](https://github.com/yourusername/docling-pdf-converter/workflows/PyInstaller%20Build%20and%20Release/badge.svg)](https://github.com/yourusername/docling-pdf-converter/actions)

A GUI application for converting PDF documents to Markdown using Docling. This project primarily serves as an experiment in cross-compilation using GitHub Actions, demonstrating how to build Python applications for multiple platforms from a single Linux environment.

## Project Goals

1. **Cross-Compilation Experimentation**
   - Build from Linux for Windows, macOS, and Linux targets
   - Support both x86_64 and ARM64 architectures
   - Create self-contained executables without target OS access
   - Handle dependencies and resources across platforms
   - Automate the release process

2. **Technical Implementation**
   - Modern Python practices (3.11+)
   - Type-safe code with comprehensive testing
   - Memory-efficient PDF processing
   - User-friendly GUI interface

## Features

- Cross-platform PDF to Markdown conversion
- Table extraction in fast and accurate modes
- Memory-efficient processing
- Simple, native-looking GUI
- Self-contained executables

## Requirements

- Python 3.11 or newer
- Operating System: Windows, macOS, or Linux

## Installation

### End Users

Download the appropriate executable for your system from the [Releases](https://github.com/yourusername/docling-pdf-converter/releases) page:

- Windows: `docling-converter-windows-x86_64.exe`
- macOS:
  - Intel: `docling-converter-macos-x86_64`
  - Apple Silicon: `docling-converter-macos-arm64`
- Linux:
  - x86_64: `docling-converter-linux-x86_64`
  - ARM64: `docling-converter-linux-aarch64`

### Developers

1. Clone the repository:
```bash
git clone https://github.com/yourusername/docling-pdf-converter.git
cd docling-pdf-converter
```

2. Create a virtual environment:
```bash
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

3. Install dependencies:
```bash
pip install -e ".[dev]"
```

## Development

### Code Quality
```bash
# Format and lint code
ruff check .
ruff format .

# Type checking
mypy src
```

### Testing
```bash
pytest
```

### Creating a Release

1. Update version in `src/docling_converter/__about__.py`
2. Update CHANGELOG.md
3. Create and push a new tag:
```bash
git tag v1.0.0
git push origin v1.0.0
```

The GitHub Action will automatically:
- Run tests
- Build executables for all platforms
- Create a new release with the binaries

## Project Structure
```
docling-pdf-converter/
├── src/
│   └── docling_converter/
│       ├── __init__.py
│       ├── __about__.py
│       ├── app.py
│       └── resources/
│           └── .gitkeep
├── tests/
│   ├── __init__.py
│   ├── conftest.py
│   ├── test_app.py
│   └── data/
│       └── test.pdf
├── .github/
│   └── workflows/
│       ├── code-quality.yml
│       ├── tests.yml
│       └── build-release.yml
├── .gitignore
├── CHANGELOG.md
├── LICENSE
├── pyproject.toml
└── README.md
```

## Cross-Compilation Details

### Build Process
- Uses GitHub Actions with Ubuntu runners
- Leverages QEMU for ARM64 builds
- PyInstaller for executable creation
- Automated resource bundling

### Supported Platforms
- Windows (x86_64)
- macOS (x86_64, ARM64)
- Linux (x86_64, ARM64)

### CI/CD Pipeline
1. **Code Quality** (`code-quality.yml`)
   - Ruff (linting and formatting)
   - MyPy (type checking)
   - Security checks

2. **Tests** (`tests.yml`)
   - Multiple Python versions
   - Multiple operating systems
   - Coverage reporting

3. **Build & Release** (`build-release.yml`)
   - Cross-platform builds
   - Automatic releases on tags
   - Asset uploading

## Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Run quality checks:
```bash
ruff check . && ruff format . && mypy src && pytest
```
4. Commit your changes (`git commit -m 'Add amazing feature'`)
5. Push to the branch (`git push origin feature/amazing-feature`)
6. Create a Pull Request

## License

MIT License - see [`LICENSE`](LICENSE) for details.
