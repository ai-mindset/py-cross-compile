name: PyInstaller Build and Release

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.platform }}-${{ matrix.arch }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x86_64
          - os: ubuntu-latest
            platform: linux
            arch: aarch64
          - os: ubuntu-latest
            platform: windows
            arch: x86_64
          - os: ubuntu-latest
            platform: macos
            arch: x86_64
          - os: ubuntu-latest
            platform: macos
            arch: arm64

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Create resources directory
        run: |
          mkdir -p src/pdf_converter/resources
          touch src/pdf_converter/resources/.gitkeep

      - name: Set up QEMU
        if: matrix.arch == 'aarch64' || matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Install cross-compilation tools
        if: matrix.platform != 'windows'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install Windows cross-compilation tools
        if: matrix.platform == 'windows'
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64

      - name: Debug directory structure
        run: |
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
          echo "Source directory contents:"
          ls -la src/
          echo "PDF converter directory contents:"
          ls -la src/pdf_converter/

      - name: Build with PyInstaller
        env:
          PLATFORM: ${{ matrix.platform }}
          ARCH: ${{ matrix.arch }}
        run: |
          # Create spec file with platform-specific settings
          echo "# -*- mode: python ; coding: utf-8 -*-" > build.spec
          echo "block_cipher = None" >> build.spec
          echo "a = Analysis(['src/pdf_converter/app.py']," >> build.spec
          echo "    pathex=[]," >> build.spec
          echo "    binaries=[]," >> build.spec
          echo "    datas=[]," >> build.spec
          echo "    hiddenimports=[]," >> build.spec
          if [ "$PLATFORM" = "windows" ]; then
            # Windows-specific configuration
            echo "    target_platform='win64'," >> build.spec
          fi
          echo "    hookspath=[]," >> build.spec
          echo "    hooksconfig={}," >> build.spec
          echo "    runtime_hooks=[]," >> build.spec
          echo "    excludes=[]," >> build.spec
          echo "    win_no_prefer_redirects=False," >> build.spec
          echo "    win_private_assemblies=False," >> build.spec
          echo "    cipher=block_cipher," >> build.spec
          echo "    noarchive=False)" >> build.spec
          echo "pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)" >> build.spec
          echo "exe = EXE(pyz," >> build.spec
          echo "    a.scripts," >> build.spec
          echo "    a.binaries," >> build.spec
          echo "    a.zipfiles," >> build.spec
          echo "    a.datas," >> build.spec
          echo "    []," >> build.spec
          echo "    name='pdf-converter-$PLATFORM-$ARCH'," >> build.spec
          if [ "$PLATFORM" = "windows" ]; then
            # Windows-specific EXE settings
            echo "    target_platform='win64'," >> build.spec
          fi
          echo "    debug=False," >> build.spec
          echo "    strip=False," >> build.spec
          echo "    upx=True," >> build.spec
          echo "    console=True)" >> build.spec

          # Build using platform-specific settings
          if [ "$PLATFORM" = "windows" ]; then
            pyinstaller --clean --target-platform win64 build.spec
          else
            pyinstaller --clean build.spec
          fi

      - name: List dist directory
        run: ls -la dist/

      - name: Create ZIP archive
        run: |
          cd dist
          if [ "${{ matrix.platform }}" = "windows" ]; then
            # Verify file exists before zipping
            if [ -f "pdf-converter-${{ matrix.platform }}-${{ matrix.arch }}.exe" ]; then
              zip "pdf-converter-${{ matrix.platform }}-${{ matrix.arch }}.zip" "pdf-converter-${{ matrix.platform }}-${{ matrix.arch }}.exe"
            else
              echo "Windows executable not found!"
              ls -la
              exit 1
            fi
          else
            zip "pdf-converter-${{ matrix.platform }}-${{ matrix.arch }}.zip" "pdf-converter-${{ matrix.platform }}-${{ matrix.arch }}"
          fi

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            */pdf-converter-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
