name: PyInstaller Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x86_64
          - os: ubuntu-latest
            platform: linux
            arch: aarch64
          - os: ubuntu-latest
            platform: windows
            arch: x86_64
          - os: ubuntu-latest
            platform: macos
            arch: x86_64
          - os: ubuntu-latest
            platform: macos
            arch: arm64

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'  # Enables pip caching for faster builds

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Set up QEMU
        if: matrix.arch == 'aarch64' || matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Install cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64 gcc-aarch64-linux-gnu

      - name: Build with PyInstaller
        env:
          PLATFORM: ${{ matrix.platform }}
          ARCH: ${{ matrix.arch }}
        run: |
          if [ "$PLATFORM" = "windows" ]; then
            pyinstaller --clean --onefile --windowed \
              --target-architecture x86_64 \
              --name "app-$PLATFORM-$ARCH" \
              --add-binary "resources/*:resources" \
              main.py
          elif [ "$PLATFORM" = "macos" ]; then
            pyinstaller --clean --onefile \
              --target-architecture $ARCH \
              --name "app-$PLATFORM-$ARCH" \
              --add-binary "resources/*:resources" \
              main.py
          else
            pyinstaller --clean --onefile \
              --target-architecture $ARCH \
              --name "app-$PLATFORM-$ARCH" \
              --add-binary "resources/*:resources" \
              main.py
          fi

      - name: Create ZIP archive
        run: |
          cd dist
          if [ "${{ matrix.platform }}" = "windows" ]; then
            zip "app-${{ matrix.platform }}-${{ matrix.arch }}.zip" "app-${{ matrix.platform }}-${{ matrix.arch }}.exe"
          else
            zip "app-${{ matrix.platform }}-${{ matrix.arch }}.zip" "app-${{ matrix.platform }}-${{ matrix.arch }}"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ matrix.platform }}-${{ matrix.arch }}
          path: dist/app-${{ matrix.platform }}-${{ matrix.arch }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            */app-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
